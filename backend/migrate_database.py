"""
Script ƒë·ªÉ ki·ªÉm tra v√† migrate database schema
Ch·∫°y script n√†y ƒë·ªÉ update b·∫£ng users v·ªõi c√°c columns m·ªõi
"""

import psycopg2
from psycopg2 import sql
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Database connection string
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://demo_user:demouser01@localhost:5432/demo_app")

def check_column_exists(cursor, table_name, column_name):
    """Ki·ªÉm tra xem column c√≥ t·ªìn t·∫°i trong table kh√¥ng"""
    cursor.execute("""
        SELECT EXISTS (
            SELECT 1 
            FROM information_schema.columns 
            WHERE table_name = %s AND column_name = %s
        );
    """, (table_name, column_name))
    return cursor.fetchone()[0]

def get_table_structure(cursor, table_name):
    """L·∫•y structure c·ªßa table"""
    cursor.execute("""
        SELECT column_name, data_type, is_nullable, character_maximum_length
        FROM information_schema.columns 
        WHERE table_name = %s
        ORDER BY ordinal_position;
    """, (table_name,))
    return cursor.fetchall()

def migrate_database():
    """Ch·∫°y migration ƒë·ªÉ update database schema"""
    try:
        # K·∫øt n·ªëi database
        print("üîå Connecting to database...")
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        print("‚úÖ Connected successfully!\n")
        
        # Ki·ªÉm tra table users c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_name = 'users'
            );
        """)
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            print("‚ö†Ô∏è  Table 'users' ch∆∞a t·ªìn t·∫°i.")
            print("üí° H√£y ch·∫°y backend ƒë·ªÉ t·ª± ƒë·ªông t·∫°o tables:")
            print("   python -m uvicorn app.main:app --reload")
            return
        
        print("üìä Current table structure:")
        print("-" * 80)
        structure = get_table_structure(cursor, 'users')
        for col in structure:
            print(f"  {col[0]:20} {col[1]:15} {col[2]:10} {col[3] if col[3] else ''}")
        print("-" * 80)
        print()
        
        # Ki·ªÉm tra c√°c columns c·∫ßn thi·∫øt
        needs_migration = False
        
        print("üîç Checking required columns...")
        
        # Check username column
        if not check_column_exists(cursor, 'users', 'username'):
            print("  ‚ùå Column 'username' not found - MIGRATION NEEDED")
            needs_migration = True
        else:
            print("  ‚úÖ Column 'username' exists")
        
        # Check hashed_password column
        if not check_column_exists(cursor, 'users', 'hashed_password'):
            print("  ‚ùå Column 'hashed_password' not found - MIGRATION NEEDED")
            needs_migration = True
        else:
            print("  ‚úÖ Column 'hashed_password' exists")
        
        print()
        
        if not needs_migration:
            print("‚úÖ Database schema is up to date! No migration needed.")
            print()
            return
        
        # Th·ª±c hi·ªán migration
        print("üöÄ Starting migration...")
        print("-" * 80)
        
        migration_steps = []
        
        # Add username column
        if not check_column_exists(cursor, 'users', 'username'):
            print("  üìù Adding 'username' column...")
            cursor.execute("""
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS username VARCHAR(100) UNIQUE;
            """)
            migration_steps.append("Added 'username' column")
            print("     ‚úÖ Done")
        
        # Add hashed_password column
        if not check_column_exists(cursor, 'users', 'hashed_password'):
            print("  üìù Adding 'hashed_password' column...")
            cursor.execute("""
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS hashed_password VARCHAR(255);
            """)
            migration_steps.append("Added 'hashed_password' column")
            print("     ‚úÖ Done")
        
        # Make name nullable
        print("  üìù Making 'name' column nullable...")
        cursor.execute("""
            ALTER TABLE users 
            ALTER COLUMN name DROP NOT NULL;
        """)
        migration_steps.append("Made 'name' nullable")
        print("     ‚úÖ Done")
        
        # Make provider nullable
        print("  üìù Making 'provider' column nullable...")
        cursor.execute("""
            ALTER TABLE users 
            ALTER COLUMN provider DROP NOT NULL;
        """)
        migration_steps.append("Made 'provider' nullable")
        print("     ‚úÖ Done")
        
        # Update existing users provider
        print("  üìù Setting default provider for existing users...")
        cursor.execute("""
            UPDATE users 
            SET provider = 'microsoft' 
            WHERE provider IS NULL;
        """)
        migration_steps.append("Set default provider")
        print("     ‚úÖ Done")
        
        # Create indexes
        print("  üìù Creating indexes...")
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        """)
        migration_steps.append("Created indexes")
        print("     ‚úÖ Done")
        
        # Commit changes
        conn.commit()
        
        print("-" * 80)
        print("‚úÖ Migration completed successfully!")
        print()
        
        # Show updated structure
        print("üìä Updated table structure:")
        print("-" * 80)
        structure = get_table_structure(cursor, 'users')
        for col in structure:
            print(f"  {col[0]:20} {col[1]:15} {col[2]:10} {col[3] if col[3] else ''}")
        print("-" * 80)
        print()
        
        print("üìù Migration Summary:")
        for step in migration_steps:
            print(f"  ‚úÖ {step}")
        print()
        
        print("üéâ Database is now ready for authentication!")
        print()
        print("Next steps:")
        print("  1. Start backend: python -m uvicorn app.main:app --reload")
        print("  2. Test registration: POST /auth/register")
        print("  3. Test login: POST /auth/login")
        
    except psycopg2.Error as e:
        print(f"‚ùå Database error: {e}")
        if conn:
            conn.rollback()
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
        print("\nüîå Database connection closed.")

if __name__ == "__main__":
    print("=" * 80)
    print("  DATABASE MIGRATION TOOL")
    print("  Demo Login/Register Event - Users Table Migration")
    print("=" * 80)
    print()
    
    migrate_database()
